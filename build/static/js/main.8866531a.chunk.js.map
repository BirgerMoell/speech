{"version":3,"sources":["logo.svg","Dictaphone.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dictaphone","props","recognition","window","SpeechRecognition","webkitSpeechRecognition","speechRecognitionList","SpeechGrammarList","webkitSpeechGrammarList","addFromString","grammars","continous","interimResults","useState","loading","sentence","setSentence","transcript","setTranscript","setMeme","setWake","startListening","a","start","reset","stop","onresult","event","console","log","results","includes","document","getElementById","play","onClick","size","color","className","App","web","api","controls","id","src","type","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+HAAAA,EAAOC,QAAU,IAA0B,kC,8JC4F5BC,EAtFI,SAACC,GAElB,IACMC,EAAc,IADLC,OAAOC,mBAAqBD,OAAOE,yBAI5CC,EAAwB,IADVH,OAAOI,mBAAqBJ,OAAOK,yBAEvDF,EAAsBG,cAHN,scAG6B,GAC7CP,EAAYQ,SAAWJ,EACvBJ,EAAYS,WAAY,EACxBT,EAAYU,gBAAiB,EAVD,MAYEC,oBAAS,GAZX,mBAYrBC,EAZqB,aAaID,mBAAS,KAbb,mBAarBE,EAbqB,KAaXC,EAbW,OAcQH,mBAAS,IAdjB,mBAcrBI,EAdqB,KAcTC,EAdS,OAeJL,mBAAS,IAfL,mBAefM,GAfe,aAgBJN,oBAAS,GAhBL,mBAgBfO,GAhBe,WAoCtBC,EAAc,uCAAG,sBAAAC,EAAA,sDAGrBN,EAAY,IACZG,EAAQ,IAERjB,EAAYqB,QANS,2CAAH,qDASdC,EAAK,uCAAG,sBAAAF,EAAA,sDACZN,EAAY,IACZE,EAAc,IACdC,EAAQ,IACRC,GAAQ,GACRlB,EAAYuB,OALA,2CAAH,qDAuBX,OAfAvB,EAAYwB,SAAW,SAASC,GAC9BC,QAAQC,IAAI,eAAgBF,GAC5B,IAAMV,EAAaU,EAAMG,QAAQ,GAAG,GAAGb,YACvCW,QAAQC,IAAIZ,GAERA,EAAWc,SAAS,uBAEdC,SAASC,eAAe,SAC9BC,OAGJhB,EAAcD,IAKd,6BACE,4BAAQkB,QAAS,kBAAMd,MAAvB,SAEA,4BAAQc,QAAS,kBAAMX,MAAvB,SAEA,2BAAIP,GAGJ,kBAAC,IAAD,CACImB,KAAM,IACNC,MAAO,UACPvB,QAASA,IAEZC,IAAaD,GAAW,yBAAKwB,UAAU,sBAAqB,2BAAIvB,M,MCmGxDwB,MArCf,WAAgB,IAAD,EAEW1B,mBAAS,IAFpB,gCAGSA,oBAAS,IAHlB,mBAGN2B,EAHM,aAIS3B,mBAAS,UAJlB,mBAIN4B,EAJM,KAkBb,OAlBa,KAmBX,yBAAKH,UAAU,OAEb,4BAAQA,UAAU,cAEjB,2BAAOI,UAAQ,EAACC,GAAG,SAElB,4BAAQC,IAAI,gBAAgBC,KAAK,eAIjC,+CACA,kBAAC,EAAD,CAAYJ,IAAKA,EAAKD,IAAKA,OCxKfM,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpB,SAASC,eAAe,SDyHpB,kBAAmBoB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.8866531a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react'\nimport { playAudio, generateText } from './App.js'\nimport ClipLoader from \"react-spinners/ClipLoader\";\n \nlet wakeWord = \"axela\"\n\nconst Dictaphone = (props) => {\n\n  const speech = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = new speech()\n  const grammar = 'hello; axela; summarize; joke; <color> = aqua | resource | forest | management | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;'\n  const grammarList = window.SpeechGrammarList || window.webkitSpeechGrammarList;\n  const speechRecognitionList = new grammarList();\n  speechRecognitionList.addFromString(grammar, 1);\n  recognition.grammars = speechRecognitionList;\n  recognition.continous = true\n  recognition.interimResults = true\n\n  const [loading, setLoading] = useState(false)\n  const [sentence, setSentence] = useState(\"\")\n  const [transcript, setTranscript] = useState(\"\")\n  const [meme, setMeme] = useState(\"\")\n  const [wake, setWake] = useState(false)\n\n  const getTextResponse = async (transcript, api) => {\n    setLoading(true)\n    let words = await generateText(transcript, api)\n    if (words && words.image) {\n      console.log(\"the words are\", words)\n      setMeme(words.image)\n      setLoading(false)\n    } \n    \n    else if (words && words.text) {\n      console.log(\"the words are\", words)\n        console.log(\"inside words\")\n        playAudio(words.text, props.web)\n        setSentence(words.text)\n        setLoading(false)\n    }\n  }\n\n  const startListening = async () => {\n    // const context = new AudioContext();\n    // context.resume();\n    setSentence(\"\")\n    setMeme(\"\")\n    //SpeechRecognition.startListening()\n    recognition.start()\n  }\n\n  const reset = async () => {\n    setSentence(\"\")\n    setTranscript(\"\")\n    setMeme(\"\")\n    setWake(false)\n    recognition.stop()\n  }\n\n  recognition.onresult = function(event) {\n    console.log(\"the event is\", event)\n    const transcript = event.results[0][0].transcript;\n    console.log(transcript)\n\n    if (transcript.includes(\"Forest Management\")) {\n      // alert(\"we got the rhight word\")\n      var x = document.getElementById(\"audio\");\n      x.play();\n    }\n\n    setTranscript(transcript)\n\n } \n\n  return (\n    <div>\n      <button onClick={() => startListening()}>Start</button>\n      {/* <button onClick={recognition.stop}>Stop</button> */}\n      <button onClick={() => reset()}>Reset</button>\n\n      <p>{transcript}</p>\n\n  \n      <ClipLoader\n          size={150}\n          color={\"#96E42B\"}\n          loading={loading}\n        />\n      {sentence && !loading && <div className=\"Sentence-container\"><p>{sentence}</p></div>}\n    </div>\n  )\n}\nexport default Dictaphone","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport Dictaphone from './Dictaphone'\nimport { getApi, getGiphy } from './api.js'\nimport './App.css';\n\nlet checkfor = \"what is\"\nlet explain = \"explain\"\nlet xplain = \"x-plane\"\nlet joke = \"joke\"\nlet meme = \"meme\"\n\nfunction checkForSummary(text, api) {\n  text = text.toLowerCase();\n  if (text.includes(checkfor)) {\n    return text.split(checkfor)[1]\n  } else if (text.includes(explain)) {\n    return text.split(explain)[1]\n  } else if (text.includes(xplain)) {\n    return text.split(xplain)[1]\n  } else if (api === \"summary\")\n    return text\n  return false\n}\n\nfunction checkForJoke(text) {\n  text = text.toLowerCase();\n\n  if (text.includes(joke)) {\n    return joke\n  } else {\n    return false\n  }\n}\n\nasync function checkForMeme(text) {\n  text = text.toLowerCase();\n  if (text.includes(meme)) {\n    let meme = await getGiphy(\"kitten\")\n    return meme\n  } else {\n    return false\n  }\n}\n\n\nasync function getJoke() {\n  let joke = await getApi(\"https://official-joke-api.appspot.com/jokes/programming/random\")\n  console.log(\"the joke is\", joke)\n  let jokeResponse = joke[0].setup + \" \" + joke[0].punchline\n  let response = {\n    text: jokeResponse\n  }\n  console.log(\"the joke response is\", response)\n  return response\n}\n\n\n\nexport async function generateText(text, api) {\n  let tellJoke = checkForJoke(text)\n  let textToSum = checkForSummary(text, api)\n  let showMeme = await checkForMeme(text)\n\n  if (showMeme) {\n    let response = {\n      image: showMeme\n    }\n    return response\n  }\n\n  else if (tellJoke) {\n    console.log(\"inside get joke\")\n    return await getJoke()\n  }\n\n  else if (textToSum) {\n\n    let data = {\n      text: textToSum\n    }\n\n    let response = await fetch(\"http://127.0.0.1:8002/summary\",\n      {\n        method: \"POST\",\n        contentType: \"application/json\",\n        body: JSON.stringify(data)\n      })\n\n    let responseJson = await response.json()\n\n    if (responseJson.text) {\n      console.log(\"the summary response json\", responseJson)\n      return responseJson\n    } else {\n      return await generateFromApi(text, api)\n    }\n  } else {\n    return await generateFromApi(text, api)\n  }\n\n}\n\nasync function generateFromApi(text, api) {\n  let data = {\n    text: text\n  }\n\n  let url = api === \"eliza\" ? \"http://127.0.0.1:8002/eliza\" : \"http://127.0.0.1:8002/generate\"\n\n  let response = await fetch(url,\n    {\n      method: \"POST\",\n      contentType: \"application/json\",\n      body: JSON.stringify(data)\n    })\n\n  let responseJson = await response.json()\n\n  console.log(\"the response json\", responseJson)\n  return responseJson\n}\n\nexport async function playAudioWeb(text) {\n  let utterance = new SpeechSynthesisUtterance(text);\n  speechSynthesis.speak(utterance);\n}\n\nexport async function playAudioDocker(text) {\n  var audio = new Audio(`http://localhost:5002/api/tts?text=${encodeURIComponent(text)}`);\n  audio.type = 'audio/wav';\n\n  try {\n    await audio.play();\n    console.log('Playing...');\n  } catch (err) {\n    console.log('Failed to play...' + err);\n  }\n}\n\nexport async function playAudio(text, web) {\n  if (web) {\n    playAudioWeb(text)\n  }\n  else {\n    playAudioDocker(text)\n  }\n}\n\n\nfunction App() {\n\n  const [text, setText] = useState(\"\")\n  const [web, setWeb] = useState(true)\n  const [api, setApi] = useState(\"eliza\")\n\n  const updateApi = (e) => {\n    setApi(e.target.value)\n  }\n\n  const updateTTS = (e) => {\n    if (e.target.value === \"web\") {\n      setWeb(true)\n    } else {\n      setWeb(false)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n\n      <header className=\"App-header\">\n\n       <audio controls id=\"audio\">\n\n        <source src=\"./thunder.mp3\" type=\"audio/mp3\"/>\n\n       </audio>\n\n        <p>Share your voice</p>\n        <Dictaphone api={api} web={web} />\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}